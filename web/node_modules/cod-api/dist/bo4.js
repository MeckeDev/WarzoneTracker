"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var BO4_ENDPOINT = utils_1.COD_API_ENDPOINT + "/crm/cod/v2/title/bo4";
function getRawMultiplayerStats(username, platform) {
    var uri = BO4_ENDPOINT + "/platform/" + platform + "/gamer/" + username + "/profile?type=mp";
    return utils_1.getDataFromAPI(uri);
}
exports.getRawMultiplayerStats = getRawMultiplayerStats;
function getRawBlackoutStats(username, platform) {
    var uri = BO4_ENDPOINT + "/platform/" + platform + "/gamer/" + username + "/profile?type=blackout";
    return utils_1.getDataFromAPI(uri);
}
exports.getRawBlackoutStats = getRawBlackoutStats;
function getRawZombiesStats(username, platform) {
    var uri = BO4_ENDPOINT + "/platform/" + platform + "/gamer/" + username + "/profile?type=zombies";
    return utils_1.getDataFromAPI(uri);
}
exports.getRawZombiesStats = getRawZombiesStats;
function getRawMultiplayerMatchesStats(_a) {
    var username = _a.username, platform = _a.platform, start = _a.start, end = _a.end;
    var startTimestamp = start ? start.getTime() : 0;
    var endTimestamp = end ? end.getTime() : 0;
    var uri = BO4_ENDPOINT + "/platform/" + platform + "/gamer/" + username + "/matches/mp/start/" + startTimestamp + "/end/" + endTimestamp + "/details";
    return utils_1.getDataFromAPI(uri);
}
exports.getRawMultiplayerMatchesStats = getRawMultiplayerMatchesStats;
function getRawBlackoutMatchesStats(_a) {
    var username = _a.username, platform = _a.platform, start = _a.start, end = _a.end;
    var startTimestamp = start ? start.getTime() : 0;
    var endTimestamp = end ? end.getTime() : 0;
    var uri = BO4_ENDPOINT + "/platform/" + platform + "/gamer/" + username + "/matches/warzone/start/" + startTimestamp + "/end/" + endTimestamp + "/details";
    return utils_1.getDataFromAPI(uri);
}
exports.getRawBlackoutMatchesStats = getRawBlackoutMatchesStats;
function getRawZombiesMatchesStats(_a) {
    var username = _a.username, platform = _a.platform, start = _a.start, end = _a.end;
    var startTimestamp = start ? start.getTime() : 0;
    var endTimestamp = end ? end.getTime() : 0;
    var uri = BO4_ENDPOINT + "/platform/" + platform + "/gamer/" + username + "/matches/zombies/start/" + startTimestamp + "/end/" + endTimestamp + "/details";
    return utils_1.getDataFromAPI(uri);
}
exports.getRawZombiesMatchesStats = getRawZombiesMatchesStats;
/* These Blackout Methods are not populated with data yet

export async function getSoloBlackoutStats(username: string, platform: BO4Platform) {
    const rawBlackoutObject = await getRawBlackoutStats(username, platform);
    return rawBlackoutObject.data.mp.lifetime.mode.warzone_solo;
}

export async function getDuoBlackoutStats(username: string, platform: BO4Platform) {
    const rawBlackoutObject = await getRawBlackoutStats(username, platform);
    return rawBlackoutObject.data.mp.lifetime.mode.warzone_duo;
}

export async function getQuadBlackoutStats(username: string, platform: BO4Platform) {
    const rawBlackoutObject = await getRawBlackoutStats(username, platform);
    return rawBlackoutObject.data.mp.lifetime.mode.warzone_quad;
}

*/
function getOverallBlackoutStats(username, platform) {
    return __awaiter(this, void 0, void 0, function () {
        var rawBlackoutObject;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRawBlackoutStats(username, platform)];
                case 1:
                    rawBlackoutObject = _a.sent();
                    return [2 /*return*/, rawBlackoutObject.data.mp.lifetime.all];
            }
        });
    });
}
exports.getOverallBlackoutStats = getOverallBlackoutStats;
function getOverallZombiesStats(username, platform) {
    return __awaiter(this, void 0, void 0, function () {
        var rawZombiesObject;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRawZombiesStats(username, platform)];
                case 1:
                    rawZombiesObject = _a.sent();
                    return [2 /*return*/, rawZombiesObject.data.mp.lifetime.all];
            }
        });
    });
}
exports.getOverallZombiesStats = getOverallZombiesStats;
function getLifetimeMultiplayerStats(username, platform) {
    return __awaiter(this, void 0, void 0, function () {
        var rawMultiplayerObject;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRawMultiplayerStats(username, platform)];
                case 1:
                    rawMultiplayerObject = _a.sent();
                    return [2 /*return*/, rawMultiplayerObject.data.mp.lifetime];
            }
        });
    });
}
exports.getLifetimeMultiplayerStats = getLifetimeMultiplayerStats;
function getWeeklyMultiplayerStats(username, platform) {
    return __awaiter(this, void 0, void 0, function () {
        var rawMultiplayerObject;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRawMultiplayerStats(username, platform)];
                case 1:
                    rawMultiplayerObject = _a.sent();
                    return [2 /*return*/, rawMultiplayerObject.data.mp.weekly];
            }
        });
    });
}
exports.getWeeklyMultiplayerStats = getWeeklyMultiplayerStats;
function getMultiplayerMatchesStats(props) {
    return __awaiter(this, void 0, void 0, function () {
        var rawMatchesObject;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRawMultiplayerMatchesStats(props)];
                case 1:
                    rawMatchesObject = _a.sent();
                    return [2 /*return*/, rawMatchesObject.data.matches];
            }
        });
    });
}
exports.getMultiplayerMatchesStats = getMultiplayerMatchesStats;
function getBlackoutMatchesStats(props) {
    return __awaiter(this, void 0, void 0, function () {
        var rawMatchesObject;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRawBlackoutMatchesStats(props)];
                case 1:
                    rawMatchesObject = _a.sent();
                    return [2 /*return*/, rawMatchesObject.data.matches];
            }
        });
    });
}
exports.getBlackoutMatchesStats = getBlackoutMatchesStats;
function getZombiesMatchesStats(props) {
    return __awaiter(this, void 0, void 0, function () {
        var rawMatchesObject;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getRawZombiesMatchesStats(props)];
                case 1:
                    rawMatchesObject = _a.sent();
                    return [2 /*return*/, rawMatchesObject.data.matches];
            }
        });
    });
}
exports.getZombiesMatchesStats = getZombiesMatchesStats;
